(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{1033:function(t,s,a){"use strict";a.r(s);var n=a(73),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"crypto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crypto"}},[t._v("#")]),t._v(" Crypto")]),t._v(" "),a("blockquote",[a("p",[t._v("Crypto 加密模块是 C／C++ 实现这些算法后，暴露为 javascript 接口的模块，包含对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。")])]),t._v(" "),a("h2",{attrs:{id:"快速导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速导航"}},[t._v("#")]),t._v(" 快速导航")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Cipher"}},[t._v("Cipher对称密钥加密")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#Cipher%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA"}},[t._v("Cipher加解密实例演示")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#MD5%E5%8A%A0%E5%AF%86"}},[t._v("MD5加密")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#MD5%E4%BD%9C%E7%94%A8%E4%B8%8E%E7%89%B9%E7%82%B9"}},[t._v("MD5作用与特点")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#MD5%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F"}},[t._v("MD5三种实现方式")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#MD5%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA"}},[t._v("MD5加解密实例演示")])])])])]),t._v(" "),a("h2",{attrs:{id:"cipher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cipher"}},[t._v("#")]),t._v(" Cipher")]),t._v(" "),a("blockquote",[a("p",[t._v("Cipher 类用于加密数据，属于对称密钥加密，假设通信双方 A、B 通讯方 A 使用 key 对明文进行加密传输，通讯方 B 接收到密文后，使用同样的 key 进行解密得到明文。")])]),t._v(" "),a("h4",{attrs:{id:"aes-ecb-pkcs5padding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aes-ecb-pkcs5padding"}},[t._v("#")]),t._v(" AES/ECB/PKCS5Padding")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("AES")]),t._v("：代表算法")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ECB")]),t._v("：代表模式")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("PKCS5Padding")]),t._v("：代表填充量")])])]),t._v(" "),a("h4",{attrs:{id:"与java、c-等语言交互踩过的坑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与java、c-等语言交互踩过的坑"}},[t._v("#")]),t._v(" 与java、c#等语言交互踩过的坑")]),t._v(" "),a("blockquote",[a("p",[t._v("和 java 程序进行交互的时候，Java 那边使用 AES 128 位填充模式：AES/CBC/PKCS5Padding 加密方法，在 Nodejs 中采用对应的 aes-128-cbc 加密方法就能对应上，因为有使用向量（iv），但是 Nodejs 语言本身不默认自动填充，所以 Nodejs 中要用 createCipheriv 方法，来补全填充量，而不是 createCipher。")])]),t._v(" "),a("h4",{attrs:{id:"查看系统所支持的算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看系统所支持的算法"}},[t._v("#")]),t._v(" 查看系统所支持的算法")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("openssl list-cipher-algorithms")]),t._v(" 可以查看系统所支持的算法")]),t._v(" "),a("pre",[t._v("aes-128-cbc    aes-128-ecb    aes-192-cbc    aes-192-ecb    aes-256-cbc\naes-256-ecb    base64         bf             bf-cbc         bf-cfb\nbf-ecb         bf-ofb         cast           cast-cbc       cast5-cbc\ncast5-cfb      cast5-ecb      cast5-ofb      des            des-cbc\ndes-cfb        des-ecb        des-ede        des-ede-cbc    des-ede-cfb\ndes-ede-ofb    des-ede3       des-ede3-cbc   des-ede3-cfb   des-ede3-ofb\ndes-ofb        des3           desx           rc2            rc2-40-cbc\nrc2-64-cbc     rc2-cbc        rc2-cfb        rc2-ecb        rc2-ofb\nrc4            rc4-40         seed           seed-cbc       seed-cfb\nseed-ecb       seed-ofb\n")]),t._v(" "),a("h4",{attrs:{id:"cipher加解密实例演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cipher加解密实例演示"}},[t._v("#")]),t._v(" Cipher加解密实例演示")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意")]),t._v("："),a("a",{attrs:{href:"http://nodejs.cn/api/crypto.html#crypto_crypto_createcipher_algorithm_password_options",target:"_blank",rel:"noopener noreferrer"}},[t._v("crypto.createCipher"),a("OutboundLink")],1),t._v(" 已废弃，推荐使用 "),a("a",{attrs:{href:"http://nodejs.cn/api/crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv_options",target:"_blank",rel:"noopener noreferrer"}},[t._v("crypto.createCipheriv"),a("OutboundLink")],1)])]),t._v(" "),a("p",[a("strong",[t._v("数据加密")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("crypto.createCipheriv(algorithm, pwd, iv)")]),t._v(" 指定算法、密码、向量创建 cipher 加密对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cipher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cipher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCipheriv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'des-ecb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12345678'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * update方法\n         * 第一个参数代表加密的数据\n         * 第二参数代表传入数据的格式，可以是'utf8', 'ascii', 'latin1'\n         * 第三个参数代表加密数据的输出格式，可以是'latin1'， 'base64' 或者 'hex'。没有执行则返回Buffer\n         */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" encrypted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cipher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n             * final方法，返回任何加密的内容\n             * 参数可以是'latin1', 'base64' 或者 'hex'，没有指定返回Buffer\n             */")]),t._v("\n            encrypted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" cipher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" encrypted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'加密失败'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cipher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world ！！！'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 81c66a1d39d302205c55f0afac95c06bc985155d4ddb751c")]),t._v("\n")])])]),a("p",[a("strong",[t._v("数据解密")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("crypto.createDecipheriv(algorithm, pwd, iv)")]),t._v(" 指定算法、密码、向量创建 decipher 解密对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decipher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("encrypted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// const decipher = crypto.createDecipher('des-ecb', '123456');")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decipher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDecipheriv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'des-ecb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12345678'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" decrypted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" decipher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encrypted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            decrypted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" decipher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("final")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" decrypted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'解密失败'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decipher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'81c66a1d39d302205c55f0afac95c06bc985155d4ddb751c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello world ！！！")]),t._v("\n")])])]),a("h2",{attrs:{id:"md5加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#md5加密"}},[t._v("#")]),t._v(" MD5加密")]),t._v(" "),a("h4",{attrs:{id:"md5作用与特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#md5作用与特点"}},[t._v("#")]),t._v(" MD5作用与特点")]),t._v(" "),a("ul",[a("li",[t._v("作用")])]),t._v(" "),a("blockquote",[a("p",[t._v("是让大容量信息在数字签名软件签署私人秘钥前被 “压缩” 成一种保密格式，也就是把一个任意长度的字节串变换成一定长度的十六进制数字串（32个字符）\n一致性验证")])]),t._v(" "),a("ul",[a("li",[t._v("特点\n"),a("ul",[a("li",[t._v("不可逆")]),t._v(" "),a("li",[t._v("输入两个不同的明文不会得到相同的输出值")]),t._v(" "),a("li",[t._v("根据输出值，不能得到原始的明文，即过程不可逆")])])])]),t._v(" "),a("h4",{attrs:{id:"md5三种实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#md5三种实现方式"}},[t._v("#")]),t._v(" MD5三种实现方式")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("crypto.createHash(algorithm)")])])])]),t._v(" "),a("p",[t._v("创建并返回一个 hash 对象，它是一个指定算法的加密 hash，用于生成 hash 摘要。")]),t._v(" "),a("p",[t._v("参数 algorithm 可选择系统上安装的 OpenSSL 版本所支持的算法。例如："),a("code",[t._v("sha1、md5、sha256、sha512")]),t._v(" 等。在近期发行的版本中，"),a("code",[t._v("openssl list-message-digest-algorithms")]),t._v(" 会显示这些可用的摘要算法。")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("hash.update(data)")])])])]),t._v(" "),a("p",[t._v("更新 hash 的内容为指定的 data。当使用流数据时可能会多次调用该方法。")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("hash.digest(encoding='binary')")])])])]),t._v(" "),a("p",[t._v("计算所有传入数据的 hash 摘要。参数 encoding（编码方式）可以为 "),a("code",[t._v("hex、binary、base64")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"md5加解密实例演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#md5加解密实例演示"}},[t._v("#")]),t._v(" MD5加解密实例演示")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" crypto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'crypto'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("md5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" crypto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createHash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'md5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("digest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hex'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认输出长度为32位小写字母")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 25f9e794323b453885f5181f1b624d0b")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456789'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下转换为32位大写字母")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 25F9E794323B453885F5181F1B624D0B")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123456789'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);