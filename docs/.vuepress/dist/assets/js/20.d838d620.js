(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{1019:function(s,a,t){"use strict";t.r(a);var e=t(73),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#入门"}},[s._v("#")]),s._v(" 入门")]),s._v(" "),e("blockquote",[e("p",[s._v("没有人不爱惜他的生命，但很少人珍视他的时间。 —— 梁实秋")])]),s._v(" "),e("p",[s._v("Docker 自 2013 年发布至今一直备受关注，从招聘面试角度来看有些职位对于了解 Docker、K8S 这些也有一些加分项，同时学习 Docker 也是后续学习 K8S 的基础，但是对于 Docker 很多人也需并不了解，其实 Docker 也并没有那么难，本文从 Docker 入门到应用实践为大家进行讲解，中间也列举了很多实例，希望能帮助大家更好的理解。")]),s._v(" "),e("h2",{attrs:{id:"快速导航"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速导航"}},[s._v("#")]),s._v(" 快速导航")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#Docker%E5%88%9D%E8%AF%86"}},[s._v("Docker 初识")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#Docker%E5%AE%89%E8%A3%85"}},[s._v("Docker 安装")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E5%88%9D%E6%8E%A2"}},[s._v("镜像构建初探")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#Dockerfile%E5%AE%9E%E8%B7%B5"}},[s._v("Dockerfile 实践")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#Registry%E5%AE%9E%E8%B7%B5"}},[s._v("Registry 实践")])]),s._v(" "),e("li",[e("a",{attrs:{href:"#DockerCompose%E5%AE%9E%E8%B7%B5"}},[s._v("Docker Compose 实践")])])]),s._v(" "),e("p",[e("strong",[s._v("本篇 Docker 入门到实践路线图如下所示")])]),s._v(" "),e("p",[e("img",{attrs:{src:t(782),alt:""}})]),s._v(" "),e("h2",{attrs:{id:"docker初识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker初识"}},[s._v("#")]),s._v(" Docker初识")]),s._v(" "),e("h4",{attrs:{id:"为什么要使用-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用-docker"}},[s._v("#")]),s._v(" 为什么要使用 Docker")]),s._v(" "),e("p",[s._v("Docker 可以将应用以集装箱的方式进行打包，通过镜像的方式可以实现在不同的环境下进行快速部署，在团队中还可实现一次打包，多次共享，使用 Docker 可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。")]),s._v(" "),e("p",[s._v("例如，我们在本地将编译测试通过的程序打包成镜像，可以快速的在服务器环境中进行部署，有时也能解决不同的开发环境造成的问题 “明明我本地是好的，但是一到服务器就不行”。")]),s._v(" "),e("p",[s._v("为什么要使用 Docker？总结下来其有以下优点：")]),s._v(" "),e("ul",[e("li",[s._v("高效的利用系统资源（节约成本）")]),s._v(" "),e("li",[s._v("持续交付与部署（敏捷）")]),s._v(" "),e("li",[s._v("多平台的迁移更容易（可移植性）")]),s._v(" "),e("li",[s._v("容易的沙箱机制（安全性）")])]),s._v(" "),e("h4",{attrs:{id:"docker-架构一瞥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-架构一瞥"}},[s._v("#")]),s._v(" Docker 架构一瞥")]),s._v(" "),e("p",[s._v("中间部位为我们进行 Docker 操作的宿主机，其运行了一个 Docker daemon 的核心守护程序，负责构建、运行和分发 Docker 容器。")]),s._v(" "),e("p",[s._v("左边为 Docker 客户端，其与 Docker 守护进程进行通信，客户端会将 build、pull、run 命令发送到 Docker 守护进程进行执行。")]),s._v(" "),e("p",[s._v("右边为 Docler 注册表存储 Docker 镜像，是一个所有 Docker 用户共享 Docker 镜像的服务，Docker daemon 与之进行交互。")]),s._v(" "),e("p",[e("img",{attrs:{src:t(783),alt:""}})]),s._v(" "),e("h4",{attrs:{id:"docker-镜像与容器概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像与容器概述"}},[s._v("#")]),s._v(" Docker 镜像与容器概述")]),s._v(" "),e("p",[s._v("参考 "),e("a",{attrs:{href:"https://docs.docker.com/engine/docker-overview/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.docker.com/engine/docker-overview/"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("strong",[s._v("什么是 Docker 镜像")])]),s._v(" "),e("p",[s._v("Docker 会把应用程序及依赖打包进镜像（Images）里，提供了容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等），通过这个镜像文件可生成 Docker 容器。")]),s._v(" "),e("p",[s._v("例如：这个镜像文件包含了一个完整的 Ubuntu 系统，我们可以在 Ubuntu 镜像基础之上安装了 Redis、Mysql 等其它应用程序，可以回顾下 "),e("a",{attrs:{href:"#Docker%E6%9E%B6%E6%9E%84%E4%B8%80%E7%9E%A5"}},[s._v("Docker 架构一瞥")]),s._v(" 在 DOCKER_HOST 里面有个 images。")]),s._v(" "),e("p",[s._v("另外在制作好镜像文件之后可以拷贝到其它机器使用，它是通用的，镜像的制作可以基于 Dockerfile 构建后面会讲解。")]),s._v(" "),e("p",[e("strong",[s._v("什么是 Docker 容器")])]),s._v(" "),e("p",[e("strong",[s._v("容器是镜像的可运行实例")]),s._v("，你可以使用 Docker API 创建、启动、停止、移动或删除它，")]),s._v(" "),e("p",[s._v("在默认情况下，容器与其它容器及其主机是隔离的，拥有自己的独立进程空间、网络配置。")]),s._v(" "),e("p",[s._v("容器由其镜像以及在创建或启动容器时提供的任何配置选项定义。当容器被删除时，对其状态的任何未存储在持久存储中的更改都会消失。")]),s._v(" "),e("h2",{attrs:{id:"docker安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker安装"}},[s._v("#")]),s._v(" Docker安装")]),s._v(" "),e("p",[s._v("Docker 是一个开源的商业产品，提供了社区版（CE）和企业版（EE），以下也都是基于企业版进行介绍，我这里操作系统采用的 Linux 下 Ubuntu 系统，更多安装方式也可参照官网安装指南 "),e("a",{attrs:{href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.docker.com/install/"),e("OutboundLink")],1)]),s._v(" "),e("h4",{attrs:{id:"更改-docker-源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更改-docker-源"}},[s._v("#")]),s._v(" 更改 docker 源")]),s._v(" "),e("p",[s._v("这个看情况，因为 Docker 的源在国外，国内访问速度可能会不稳定，有需要的可以按照以下步骤更换为国内源")]),s._v(" "),e("ul",[e("li",[s._v("编辑 /etc/docker/daemon.json 文件，输入 docker-cn 镜像源地址")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ sudo vim /etc/docker/daemon.json\n\n{\n  "registry-mirrors": ["https://registry.docker-cn.com"]\n}\n')])])]),e("p",[s._v("也推荐使用中科大和网易的")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"registry-mirrors": [ "https://hub-mirror.c.163.com", "https://docker.mirrors.ustc.edu.cn" ]\n')])])]),e("ul",[e("li",[s._v("重启 Docker 服务")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ sudo service docker restart\n")])])]),e("h4",{attrs:{id:"设置存储库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置存储库"}},[s._v("#")]),s._v(" 设置存储库")]),s._v(" "),e("ol",[e("li",[s._v("更新 apt 软件包缓存")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("在机器上首次安装的需先设置 Docker 存储库，由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    apt-transport-https "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    ca-certificates "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    gnupg-agent "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    software-properties-common\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("添加 Docker 的官方 GPG 密钥")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://download.docker.com/linux/ubuntu/gpg "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-key "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("向 source.list 中添加 Docker 软件源")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" add-apt-repository "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   '),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("lsb_release -cs"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' \\\n   stable"')]),s._v("\n")])])]),e("h4",{attrs:{id:"安装-docker-ec-社区版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-ec-社区版"}},[s._v("#")]),s._v(" 安装 Docker EC（社区版）")]),s._v(" "),e("ol",[e("li",[s._v("更新 apt 软件包缓存")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("安装")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-ce docker-ce-cli containerd.io\n")])])]),e("h4",{attrs:{id:"添加-docker-用户组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加-docker-用户组"}},[s._v("#")]),s._v(" 添加 Docker 用户组")]),s._v(" "),e("p",[s._v("由于 Docker 操作需要拥有 root 权限，为避免每次都输入 sudo，可以把用户加入 Docker 用户组，执行以下命令")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("usermod")]),s._v(" -aG docker "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v("\n")])])]),e("h4",{attrs:{id:"验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[s._v("#")]),s._v(" 验证")]),s._v(" "),e("p",[s._v("安装完成后，运行下面的命令，验证是否安装成功")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker -v\nDocker version 19.03.2, build 6a30dfc\n")])])]),e("h2",{attrs:{id:"镜像构建初探"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像构建初探"}},[s._v("#")]),s._v(" 镜像构建初探")]),s._v(" "),e("p",[s._v("上面对 Docker 的镜像和容器做了简要概述，有个初步的了解之后，再来看下 Docker 镜像和容器的实践。")]),s._v(" "),e("h4",{attrs:{id:"抓取-image-文件到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抓取-image-文件到本地"}},[s._v("#")]),s._v(" 抓取 image 文件到本地")]),s._v(" "),e("p",[s._v("hello-world 为镜像名字，docker image pull 为抓取镜像命令，Docker 官方提供的 image 文件都放在 library 默认组里，library/hello-world 也就为 image 文件的位置。")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker image pull hello-world\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以下为抓取过程中的日志信息")]),s._v("\nUsing default tag: latest\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:451ce787d12369c5df2a32c85e5a03d52cbcef6eb3586dd03075f3034f10adcd\nStatus: Downloaded newer image "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" hello-world:latest\ndocker.io/library/hello-world:latest\n")])])]),e("h4",{attrs:{id:"查看-image-文件列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看-image-文件列表"}},[s._v("#")]),s._v(" 查看 image 文件列表")]),s._v(" "),e("p",[s._v("image 文件抓取成功通过 docker images 或 docker image ls 命令查看当前都有哪些镜像")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-world         latest              fce289e99eb9        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" months ago        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".84kB\n")])])]),e("h4",{attrs:{id:"运行-image-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行-image-文件"}},[s._v("#")]),s._v(" 运行 image 文件")]),s._v(" "),e("p",[s._v("执行 "),e("code",[s._v("docker container run")]),s._v(" 命令会生成一个正在运行的容器实例，另外 "),e("code",[s._v("docker container run")]),s._v(" 发现本地没有指定的 image 文件，其自身还有自动抓取 image 文件功能，就是上面讲解的 "),e("code",[s._v("docker image pull")]),s._v(" 命令")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker container run hello-world\n\nHello from Docker"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以下内容省略")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),e("h4",{attrs:{id:"查看容器列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看容器列表"}},[s._v("#")]),s._v(" 查看容器列表")]),s._v(" "),e("p",[s._v("使用 "),e("code",[s._v("docker ps")]),s._v(" 或 "),e("code",[s._v("docker container ls")]),s._v(" 命令用来查看正在运行的容器列表，这个时候是没有正在运行的容器实例的，因为在以上 "),e("code",[s._v("docker container run hello-world")]),s._v(" 命令执行之后 "),e("code",[s._v("hello-world")]),s._v(" 就会停止，容器也会随着自动停止，但并不是所有的容器运行之后也都会停止的，例如 Nginx 后面会进行实践。")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker ps\n")])])]),e("p",[s._v("通过 "),e("code",[s._v("docker ps --all")]),s._v(" 或 "),e("code",[s._v("docker container ls --all")]),s._v(" 命令可以查看所有的容器实例，包含已经停止的")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ docker ps --all\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\na662ec198a83        hello-world         "/hello"            10 minutes ago      Exited (0) 10 minutes ago                       exciting_wing\n')])])]),e("h4",{attrs:{id:"构建一个-nginx-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建一个-nginx-镜像"}},[s._v("#")]),s._v(" 构建一个 Nginx 镜像")]),s._v(" "),e("p",[s._v("以下命令会用 nginx 镜像启动一个容器，命名为 nginxserver，并映射到 8081 端口")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker container run --name nginxserver -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":80 nginx\n")])])]),e("p",[s._v("好了，我们现在就可以使用 http://localhost:8081/ 来访问这个 Nginx 服务器，由于我这里是在虚拟机上安装的 Docker 因此要使用我的虚拟机地址 http://192.168.6.128:8081/ 进行访问，同样如果你是在虚拟机、云服务器上安装的 Docker 也要使用相应的 ip 来访问，如果是在本机直接 localhost 就可以。以下为 Nginx 默认的欢迎页面。")]),s._v(" "),e("p",[e("img",{attrs:{src:t(784),alt:""}})]),s._v(" "),e("p",[s._v("再分别看下目前的 image 列表和正在运行的容器")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nnginx               latest              5a3221f0137b        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago         126MB\nhello-world         latest              fce289e99eb9        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" months ago        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".84kB\n\n$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\nb7bf26745b3f        nginx               "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx -g \'daemon of…"')]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" minutes ago      Up "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" minutes       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:8081-"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/tcp   nginxserver\n")])])]),e("h4",{attrs:{id:"终止容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终止容器"}},[s._v("#")]),s._v(" 终止容器")]),s._v(" "),e("p",[s._v("通过 "),e("code",[s._v("docker container kill [containID]")]),s._v(" 命令终止正在运行的容器")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker container kill [containID]")]),s._v("\n$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" b7bf26745b3f\n")])])]),e("h4",{attrs:{id:"删除容器文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除容器文件"}},[s._v("#")]),s._v(" 删除容器文件")]),s._v(" "),e("p",[s._v("上面的终止容器并不会删除容器文件，仅仅是容器停止运行，通过 docker ps --all 命令查看所有的容器列表")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" --all\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES\nb7bf26745b3f        nginx               "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx -g \'daemon of…"')]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v(" minutes ago      Exited "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" About a minute ago                       nginxserver\na662ec198a83        hello-world         "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/hello"')]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" minutes ago      Exited "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49")]),s._v(" minutes ago                             exciting_wing\n")])])]),e("p",[s._v("由于已经终止容器文件依然会占据着我们的磁盘空间，在不使用的情况可通过 "),e("code",[s._v("docker container rm [containerID]")]),s._v(" 命令删除")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker container rm b7bf26745b3f a662ec198a83\n")])])]),e("p",[s._v("执行以上命令之后，再使用 "),e("code",[s._v("docker ps --all")]),s._v(" 命令，此时容器列表就为空了。")]),s._v(" "),e("h4",{attrs:{id:"删除镜像文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像文件"}},[s._v("#")]),s._v(" 删除镜像文件")]),s._v(" "),e("p",[s._v("同样删除一个镜像文件也很简单执行 "),e("code",[s._v("docker rmi [imageID]")]),s._v(" 命令即可")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker rmi 5a3221f0137b fce289e99eb9\n")])])]),e("h2",{attrs:{id:"dockerfile实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile实践"}},[s._v("#")]),s._v(" Dockerfile实践")]),s._v(" "),e("p",[s._v("Dockerfile 是由一系列的参数、命令构成的可执行脚本，用来构建、定制 Docker 镜像。本节通过一个 Node.js 的简单项目为例，介绍下如何编写 Dockerfile 文件、如何在 Docker 容器里运行 Node.js 项目。")]),s._v(" "),e("h4",{attrs:{id:"nodejs项目准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs项目准备"}},[s._v("#")]),s._v(" Nodejs项目准备")]),s._v(" "),e("p",[s._v("/usr/src/nodejs/hello-docker 目录下新建 app.js")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// /usr/src/nodejs/hello-docker/app.js")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" http "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'http'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PORT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30010")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" server "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" http"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("createServer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("req"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("end")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello Docker'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nserver"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PORT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Running on http://localhost:'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PORT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("p",[s._v("/usr/src/nodejs/hello-docker 目录下新建 package.json")]),s._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// /usr/src/nodejs/hello-docker/package.json")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello-docker"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"version"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0.0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"description"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"author"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"May"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"main"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("   \n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"node app.js"')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dependencies"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    \n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),e("h4",{attrs:{id:"dockerfile-编写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-编写"}},[s._v("#")]),s._v(" Dockerfile 编写")]),s._v(" "),e("p",[s._v("首先在项目根目录下创建 .dockerignore 文件，把不需要打包进 Docker Image 里的文件进行过滤")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /usr/src/nodejs/hello-docker/.dockerignore")]),s._v("\n.git\nnode_modules\n")])])]),e("p",[e("strong",[s._v("Dockerfile")])]),s._v(" "),e("p",[s._v("项目根目录下新建 Dockerfile 文件")]),s._v(" "),e("div",{staticClass:"language-Dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# /usr/src/nodejs/hello-docker/Dockerfile")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" node:10.0")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器中创建一个目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" mkdir -p /usr/src/nodejs/")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定位到容器的工作目录")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /usr/src/nodejs/")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RUN/COPY 是分层的，package.json 提前，只要没修改，就不会重新安装包")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" package.json /usr/src/nodejs/package.json")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" cd /usr/src/nodejs/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" npm i")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把当前目录下的所有文件拷贝到 Image 的 /usr/src/nodejs/ 目录下")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" . /usr/src/nodejs/")]),s._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 30010")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" npm start")]),s._v("\n")])])]),e("ul",[e("li",[s._v("FROM：FROM 是构建镜像的基础源镜像，该 Image 文件继承官方的 node image")]),s._v(" "),e("li",[s._v("RUN：后面跟的是在容器中执行的命令")]),s._v(" "),e("li",[s._v("WORKDIR：容器的工作目录")]),s._v(" "),e("li",[s._v("COPY：拷贝文件至容器的工作目录下，.dockerignore 指定的文件不会拷贝")]),s._v(" "),e("li",[s._v("EXPOSE：将容器内的某个端口导出供外部访问")]),s._v(" "),e("li",[s._v("CMD：Dockerfile 执行写一个 CMD 否则后面的会被覆盖，CMD 后面的命令是容器每次启动执行的命令，多个命令之间可以使用 && 链接，例如 CMD git pull && npm start")])]),s._v(" "),e("h4",{attrs:{id:"构建-hello-docker-镜像文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建-hello-docker-镜像文件"}},[s._v("#")]),s._v(" 构建 hello-docker 镜像文件")]),s._v(" "),e("p",[s._v("Dockerfile 文件创建好之后，使用 "),e("code",[s._v("docker image build")]),s._v(" 命令创建镜像文件，-t 参数用来指定镜像的文件名称，最后一个 "),e("strong",[s._v(".")]),s._v(" 也不要省略，表示 Dockerfile 文件的所在目录")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker image build -t hello-docker .\n")])])]),e("p",[s._v("执行以上命令之后，我们来查看下新生成的镜像文件 hello-docker")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-docker        latest              6b1c2775591e        4 minutes ago       675MB\nnode                10.0                1c1272350058        16 months ago       675MB\n")])])]),e("h4",{attrs:{id:"运行容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行容器"}},[s._v("#")]),s._v(" 运行容器")]),s._v(" "),e("p",[s._v("镜像构建成功之后通过 docker container run 命令来生成一个容器，几个参数说明：")]),s._v(" "),e("ul",[e("li",[s._v("-d：表明容器的运行模式在后台")]),s._v(" "),e("li",[s._v("-p：端口映射，将本机的 30000 端口映射到容器的 30010 端口，这样在外网就可通过 30000 端口访问到我们的服务")]),s._v(" "),e("li",[s._v("hello-docker：为我们的镜像名字")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker container run -d -p 30000:30010 hello-docker\n")])])]),e("p",[s._v("执行以上命令之后通过 docker ps 查看我们刚刚运行的容器信息")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\nc2891d477edf        hello-docker        "/bin/sh -c \'npm sta…"   15 seconds ago      Up 14 seconds       0.0.0.0:30000->30010/tcp   pedantic_mestorf\n')])])]),e("p",[s._v("不出什么意外，此时我们的 Node.js 服务已经运行在 Docker 容器的虚拟环境里了，访问 "),e("code",[s._v("curl http://localhost:30000")]),s._v(" 可以进行测试。")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ curl http://localhost:30000\nHello Docker\n")])])]),e("h4",{attrs:{id:"检查日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检查日志"}},[s._v("#")]),s._v(" 检查日志")]),s._v(" "),e("p",[s._v("查看运行日志，“c2891d477edf” 为容器 ID")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker logs -f c2891d477edf\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" hello-docker@1.0.0 start /usr/src/nodejs/hello-docker\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node app.js\n\nRunning on http://localhost: "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30010")]),s._v("\n")])])]),e("h4",{attrs:{id:"容器进入退出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器进入退出"}},[s._v("#")]),s._v(" 容器进入退出")]),s._v(" "),e("p",[s._v("为了方便排查内部容器文件，可以通过 "),e("strong",[s._v("docker exec -it c2891d477edf /bin/sh")]),s._v(" 命令进入容器，c2891d477edf 为容器 ID")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it c2891d477edf /bin/sh\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出目录列表")]),s._v("\nDockerfile  app.js  package-lock.json  package.json\n")])])]),e("p",[s._v("由于我们已经启动了 hello-docker 这个服务，在容器里再次操作 node app.js 就会报端口冲突")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ node app\nevents.js:167\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE :::30010\n")])])]),e("p",[e("strong",[s._v("按下 Ctrl + d （或者输入 exit）退出容器")])]),s._v(" "),e("h2",{attrs:{id:"registry实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#registry实践"}},[s._v("#")]),s._v(" Registry实践")]),s._v(" "),e("p",[s._v("Registry 是一个注册服务器，是一个集中存放镜像仓库的地方，这里着重介绍下 Docker Hub，它是官方维护的一个公共仓库，我们的大部分需求也都可从这里下载。")]),s._v(" "),e("h4",{attrs:{id:"注册-docker-账号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册-docker-账号"}},[s._v("#")]),s._v(" 注册 Docker 账号")]),s._v(" "),e("p",[s._v("在开始之前你需要先去 Docker 官网注册一个账号 "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://hub.docker.com/"),e("OutboundLink")],1),s._v(" 后续讲解发布镜像需要用到")]),s._v(" "),e("h4",{attrs:{id:"镜像搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像搜索"}},[s._v("#")]),s._v(" 镜像搜索")]),s._v(" "),e("p",[s._v("使用 "),e("code",[s._v("docker search 镜像名称")]),s._v(" 可以搜索你需要的镜像，搜索结果会根据 STARS 进行排序")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ docker search nginx\nNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nnginx                             Official build of Nginx.                        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11935")]),s._v("               "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OK"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("                \njwilder/nginx-proxy               Automated Nginx reverse proxy "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" docker con…   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1651")]),s._v("                                    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OK"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nricharvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("740")]),s._v("                                     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OK"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),e("h4",{attrs:{id:"镜像拉取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像拉取"}},[s._v("#")]),s._v(" 镜像拉取")]),s._v(" "),e("p",[s._v("搜索到需要的镜像后执行 docker pull 命令拉取镜像")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker pull nginx\n")])])]),e("h4",{attrs:{id:"发布镜像实现共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布镜像实现共享"}},[s._v("#")]),s._v(" 发布镜像实现共享")]),s._v(" "),e("ol",[e("li",[s._v("登陆 Docker，已登陆的可以忽略这一步")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker login\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("为本地镜像打标签，tag 不写默认为 latest")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker image tag [imageName] [username]/[repository]:[tag]")]),s._v("\n$ docker image tag hello-docker mayjun/hello-docker\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("发布镜像文件")])]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker image push [username]/[repository]:[tag]")]),s._v("\n$ docker image push mayjun/hello-docker\n")])])]),e("p",[s._v("镜像发布成功之后，在自己的个人用户下也可以看到镜像信息")]),s._v(" "),e("p",[e("img",{attrs:{src:t(785),alt:""}})]),s._v(" "),e("p",[s._v("如果你想在别的机器上也使用这个镜像，直接 docker pull 拉取即可，实现镜像的共享。")]),s._v(" "),e("h2",{attrs:{id:"dockercompose实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockercompose实践"}},[s._v("#")]),s._v(" DockerCompose实践")]),s._v(" "),e("p",[s._v("Compose 是 Docker 官方开源的一个项目，可以管理多个 Docker 容器组成一个应用，例如 Web 服务，除了服务本身还有数据库、Redis、Nginx 等一系列相关联服务需要安装。")]),s._v(" "),e("p",[s._v("有个 Compose 的支持，我们只需要定义一个 YAML 格式的配置文件（"),e("code",[s._v("docker-compose.yml")]),s._v("），来编写一个项目所需要的多个容器配置及调用关系，通过简单的命令即可同时开始或者关闭这些容器。")]),s._v(" "),e("h4",{attrs:{id:"二进制安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制安装"}},[s._v("#")]),s._v(" 二进制安装")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/docker/compose/releases"),e("OutboundLink")],1)]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# compose 下载之后通过管道的方式输入至 /usr/local/bin/docker-compose")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uname -s 查找是什么系统，例如：Linux")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uname -m 查找是什么版本，例如：x86_64")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -s"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("-"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" -o /usr/local/bin/docker-compose\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把这个文件变成可执行的")]),s._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /usr/local/bin/docker-compose\n")])])]),e("p",[s._v("查看安装是否成功")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker-compose --version \ndocker-compose version 1.25.0-rc2, build 661ac20e\n")])])]),e("h4",{attrs:{id:"docker-compose-搭建-wordpress-个人博客"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-搭建-wordpress-个人博客"}},[s._v("#")]),s._v(" Docker Compose 搭建 WordPress 个人博客")]),s._v(" "),e("blockquote",[e("p",[s._v("WordPress 是一个免费开源的个人博客系统，使用的也是比较多的，并且也有 Docker 镜像，使用 Docker 部署还是非常简单的。")])]),s._v(" "),e("p",[s._v("在 /usr/src/wordpress 目录下，建立 docker-compose.yml 配置文件，写入如下内容：")]),s._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mysql")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.7")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" MYSQL_ROOT_PASSWORD=123456\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" MYSQL_DATABASE=wordpress\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("web")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" wordpress\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("links")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" mysql\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" WORDPRESS_DB_PASSWORD=123456\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"192.168.6.128:8080:80"')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("working_dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" /var/www/html\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" wordpress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/var/www/html\n")])])]),e("p",[s._v("启动容器，浏览器输入 http://192.168.6.128:8080 即可看到效果，可以亲自实践下")]),s._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d 参数表示后台启动")]),s._v("\n$ docker-compose up -d \n")])])]),e("p",[s._v("关闭容器，执行以下命令需要在 docker-compose.yml 配置文件同级目录下")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("$ docker-compose stop\n")])])]),e("p",[s._v("本文档是作者 "),e("a",{attrs:{href:"https://github.com/qufei1993",target:"_blank",rel:"noopener noreferrer"}},[s._v("@五月君"),e("OutboundLink")],1),s._v(" ，留此作为备份")])])}),[],!1,null,null,null);a.default=r.exports},782:function(s,a,t){s.exports=t.p+"assets/img/docker_base_roadmap.4fdf4481.png"},783:function(s,a,t){s.exports=t.p+"assets/img/docker_architecture.86781bc2.svg"},784:function(s,a,t){s.exports=t.p+"assets/img/docker_nginx_welcome.418edb81.png"},785:function(s,a,t){s.exports=t.p+"assets/img/docker_mayjun_hello-docker.0efca1bd.png"}}]);